require 'vacman_controller/vacman_controller'

# Provides VACMAN Controller functionality to identify and authorize user via VASCO DIGIPASS tokens.
#
#
module VacmanController
 
  # Import .dpx file containing the secure token-data
  #
  # == Parameters:
  # filename::
  #   The path of the .dpx file to load
  # key:: 
  #   The secure key to decrypt the dpx file
  # 
  # == Returns:
  # A list of hashes. Each hash contains 
  #   serial: the serial number of the token
  #   blob:   the blob containing some secret magic data
  #   app_name: the application name (the security method)
  #   flags1: some flags
  #   flags2: more flags
  # 
  # this hash must be persisted and regained for each call of verify_password and generate_password
  def VacmanController.import(filename, key)
    VacmanLowLevel.import(filename, key)
  end

  # Generate a Password for a user. This does the same as hitting the putton on your hardware token
  #
  # == Parameters:
  # hash::
  #   The hash for a specific token (you get these in import)  
  # 
  # == Returns:
  # The password string. The password is only valid for a period (todo: add method to change the period, currently its 30 seconds)
  def VacmanController.generate_password(hash)
    VacmanLowLevel.generate_password(hash)
  end

  # Verify a password. This is the usecase a user sends you a password generated by his token and we have to verify it.
  # 
  # == Parameters:
  # hash::
  #   The hash for a specific token (you get these in import)
  # pw::
  #   The password provided by the user
  # 
  # == Returns:
  # true if the password is valid, false otherwise
  #
  # ATTENTION: it is very important to persist the hash afterwards!!!
  #
  def VacmanController.verify_password(hash, pw)
    VacmanLowLevel.verify_password(hash, pw)
  end



  # Change a kernel parameter, wich is a basically a setting for vacman controller
  # 
  # == Parameters:
  # name::
  #   the param name (see list below)
  # val::
  #   the fixnum value
  #
  # possible names:
  #    itimewindow:     Identification Window size in time steps
  #
  def VacmanController.set_kernel_param(name, val)
    VacmanLowLevel.set_kernel_param(name, val);
  end



  # todo: unlock, 
  # todo: specs
end
